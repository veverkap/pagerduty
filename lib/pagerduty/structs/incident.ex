defmodule PagerDuty.Incident do
  @moduledoc ~S"""
  An incident is a normalized, de-duplicated event generated by a PagerDuty integration.

  It can be thought of as a problem or an issue within your service that needs to be addressed and resolved.

  Incidents can be `triggered`, `acknowledged`, or `resolved`, and are
  assigned to a [user](PagerDuty.User.html) based on the [service's](PagerDuty.Service.html) [escalation policy](PagerDuty.EscalationPolicy.html).

  A triggered incident prompts a [notification](PagerDuty.Notification.html) to be sent to the currently 
  [on-call](PagerDuty.Oncall.html) [user(s)](PagerDuty.User.html) as defined in the [escalation policy](PagerDuty.EscalationPolicy.html) used by the [service](PagerDuty.Service.html).

  Incidents are triggered through the [Events
  API](https://v2.developer.pagerduty.com/docs/events-api).

  Updates to an [incident](PagerDuty.Incident.html) generate [log entries](PagerDuty.LogEntry.html) that capture the changes to an [incident](PagerDuty.Incident.html) over time, whether these changes were prompted by a [user](PagerDuty.User.html), an [integration](PagerDuty.Integration.html), or were performed automatically.

  [*Read more about incidents in the PagerDuty Knowledge
  Base*](https://support.pagerduty.com/hc/en-us/articles/202829250-What-Is-an-Incident-).
  
  ## Attributes
    * `@id`: id
    * `@summary`: A short-form, server-generated string that provides succinct, important information about an object suitable for primary labeling of an entity in a client. In many cases, this will be identical to `name`, though it is not intended to be an identifier.
    * `@type`: either `incident` or `incident_reference`
    * `@self`: the API show URL at which the object is accessible 
    * `@html_url`: a URL at which the entity is uniquely displayed in the Web app
    * `@incident_number`: The number of the incident. This is unique across your account.
    * `@created_at`: The date/time the incident was first triggered.
    * `@status`: The current status of the incident. valid options are: 
      * `triggered`
      * `acknowledged`
      * `resolved`
    * `@title`: A succinct description of the nature, symptoms, cause, or effect of the incident.
    * `@pending_actions`: The list of [pending_actions](PagerDuty.IncidentAction.html) on the incident. A [pending_action](PagerDuty.IncidentAction.html) object contains a type of action which can be `escalate`, `unacknowledge`, `resolve` or `urgency_change`. A [pending_action](PagerDuty.IncidentAction.html) object contains `at`, the time at which the action will take place. An urgency_change [pending_action](PagerDuty.IncidentAction.html) will contain `to`, the urgency that the incident will change to.
    * `@incident_key`: The incident's de-duplication key.
    * `@service`: The [service](PagerDuty.Service.html) that the incident belongs to.
    * `@assignments`: List of all [assignments](PagerDuty.Assignment.html) for this incident.
    * `@acknowledgements`: List of all [acknowledgements](PagerDuty.Acknowledgement.html) for this incident.
    * `@last_status_change_at`: The time at which the status of the incident last changed.
    * `@last_status_change_by`: The [user or service](PagerDuty.Agent.html) which is responsible for the incident's last status change. If the incident is in the acknowledged or resolved status, this will be the user that took the first acknowledged or resolved action. If the incident was automatically resolved (say through the Events API), or if the incident is in the triggered state, this will be the incident's service.
    * `@first_trigger_log_entry`: The first trigger [log entry](PagerDuty.LogEntry.html) for the incident.
    * `@escalation_policy`: The [escalation policy](PagerDuty.EscalationPolicy.html) that the incident is currently following.
    * `@teams`: The list of [teams](PagerDuty.Team.html) involved in the incidentâ€™s lifecycle.
    * `@urgency`: The current urgency of the incident. valid options are: 
      * `high`
      * `low`
    * `@resolve_reason`: The [reason](PagerDuty.ResolveReason.html) the incident was resolved. Currently the only valid values are `nil` and `merged` with plans to introduce additional reasons in the future.
    * `@alert_counts`: A [summary](PagerDuty.AlertCount.html) of the number of alerts by status.
    * `@body`: [String](PagerDuty.IncidentBody.html) describing the incident
  """  
  defstruct id: nil, 
            summary: nil, 
            type: nil,
            self: nil, 
            html_url: nil,
            incident_number: nil, 
            created_at: nil, 
            status: nil, 
            title: "",
            pending_actions: [%PagerDuty.IncidentAction{}],
            incident_key: "",
            service: %PagerDuty.Service{},
            assignments: [%PagerDuty.Assignment{}],
            acknowledgements: [],
            last_status_change_at: nil,
            last_status_change_by: %PagerDuty.Agent{},
            first_trigger_log_entry: %PagerDuty.LogEntry{},
            escalation_policy: %PagerDuty.EscalationPolicy{},
            teams: [%PagerDuty.Team{}],
            urgency: nil,
            resolve_reason: %PagerDuty.ResolveReason{},
            alert_counts: %PagerDuty.AlertCount{},
            body: %PagerDuty.IncidentBody{}

  @type t :: %__MODULE__{
    id: String.t,
    summary: String.t,
    type: String.t,
    self: String.t,
    html_url: String.t,    
    incident_number: non_neg_integer,
    created_at: String.t | nil,
    status: String.t,
    title: String.t,
    pending_actions: list(%PagerDuty.IncidentAction{}),
    incident_key: String.t | nil,
    service: %PagerDuty.Service{},
    assignments: list(%PagerDuty.Assignment{}),
    assignments: list(%PagerDuty.Acknowledgement{}),
    last_status_change_at: String.t | nil,
    last_status_change_by: %PagerDuty.Agent{},
    first_trigger_log_entry: %PagerDuty.LogEntry{},
    escalation_policy: %PagerDuty.EscalationPolicy{},
    teams: list(%PagerDuty.Team{}),
    urgency: String.t | nil,
    resolve_reason: %PagerDuty.ResolveReason{},
    alert_counts: %PagerDuty.AlertCount{},
    body: %PagerDuty.IncidentBody{}
  }            
  def new(addon) do
    struct(PagerDuty.Incident, PagerDuty.Utils.atomize(addon))
  end
end
