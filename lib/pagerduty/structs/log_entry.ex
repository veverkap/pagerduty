defmodule PagerDuty.LogEntry do
  @moduledoc ~S"""
  PagerDuty keeps a log of all the events that happen to an [incident](PagerDuty.Incident.html).  These are exposed as log entries.

  Log entries give you more insight into how your [team](PagerDuty.Team.html) or
  organization is handling your [incidents](PagerDuty.Incident.html).

  Log entry data includes details about the event(s) that affected the
  `PagerDuty.Incident` throughout its lifecycle, such as:

  - the data contained in events sent by the `PagerDuty.Integration`
  - what `PagerDuty.User` were notified (`PagerDuty.Notification`) and when
  - how they were notified (`PagerDuty.Notification`)
  - what `PagerDuty.User` acknowledged or resolved the `PagerDuty.Incident`
  - any automatic actions that occurred to the `PagerDuty.Incident`
  - other manual `PagerDuty.User` actions, such as a reassignment or a [note](PagerDuty.User.html)

  Log entries cannot be created directly through the API; they are a result
  of other actions. The API provides read-only access to the log entries
  generated by PagerDuty.  

  ## Attributes
    * `@id`: id
    * `@summary`: A short-form, server-generated string that provides succinct, important information about an object suitable for primary labeling of an entity in a client. In many cases, this will be identical to `name`, though it is not intended to be an identifier.
    * `@self`: the API show URL at which the object is accessible 
    * `@html_url`: a URL at which the entity is uniquely displayed in the Web app    
    * `@type`: valid options are:
      * `acknowledge_log_entry`
      * `acknowledge_log_entry_reference`
      * `annotate_log_entry`
      * `annotate_log_entry_reference`
      * `assign_log_entry`
      * `assign_log_entry_reference`
      * `escalate_log_entry`
      * `escalate_log_entry_reference`
      * `exhaust_escalation_path_log_entry`
      * `exhaust_escalation_path_log_entry_reference`
      * `notify_log_entry`
      * `notify_log_entry_reference`
      * `reach_trigger_limit_log_entry`
      * `reach_trigger_limit_log_entry_reference`
      * `repeat_escalation_path_log_entry`
      * `repeat_escalation_path_log_entry_reference`
      * `resolve_log_entry`
      * `resolve_log_entry_reference`
      * `snooze_log_entry`
      * `snooze_log_entry_reference`
      * `trigger_log_entry`
      * `trigger_log_entry_reference`
      * `unacknowledge_log_entry`
      * `unacknowledge_log_entry_reference    `
    * `@created_at`: Time at which the log entry was created.
    * `@channel`: The `PagerDuty.Channel` field represents the means by which the action was carried out.
    * `@agent`: `PagerDuty.Agent`
    * `@note`: Optional field containing a note, if one was included with the log entry.
    * `@contexts`: `PagerDuty.Context`s to be included with the trigger such as links to graphs or images.
    * `@service`: Will be a reference to [service](PagerDuty.Service.html) unless included
    * `@incident`: Will be a reference to [incident](PagerDuty.Incident.html) unless included
    * `@teams`: Will consist of references to [teams](PagerDuty.Team.html) unless included
    * `@event_details`: Additional details about the event.
  """
  defstruct id: nil, summary: nil, type: nil, self: nil, html_url: nil, created_at: nil, channel: nil, agent: nil, note: nil, contexts: nil, service: nil, incident: nil, teams: nil, event_details: nil
  @type t :: %__MODULE__{
    id: String.t,
    summary: String.t,
    type: String.t,
    self: String.t,
    html_url: String.t,
    created_at: String.t,
    channel: PagerDuty.Channel,
    agent: PagerDuty.Agent,
    note: String.t,
    contexts: list(PagerDuty.Context),
    service: PagerDuty.Service,
    incident: PagerDuty.Incident,
    teams: list(PagerDuty.Team),
    event_details: String.t
  }
end
